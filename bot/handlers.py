# bot/handlers.py

import logging
import os
import json
import random
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters
)
from bot.states import BotStates
from bot.utils import main_menu_keyboard, confirmation_keyboard, inline_buttons
from neural_network.inference import predict_correlations
from socionics.calculations import (
    calculate_traits,
    predict_socionics_types,
    get_agree_disagree_types,
    FUNCTIONS,
    modify_coefficients_based_on_answer
)
from socionics.utils import parse_corrected_correlations
from socionics.data_processing import save_feedback
from config.settings import SOCIONICS_TYPES, TALANOV_STATEMENTS_FILE, USER_STATEMENTS_FILE, FEEDBACK_DATA_FILE, \
    DEVELOPER_CHAT_ID


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    username = user.username if user.username else user.first_name

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Å–æ—Ü–∏–æ–Ω–∏—á–µ—Å–∫–∏–π –±–æ—Ç. –Ø –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø–æ–º–æ–≥–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ—Ü–∏–æ—Ç–∏–ø –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π.",
        reply_markup=inline_buttons()
    )
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.")


# bot/handlers.py

# ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...

from telegram.ext import filters


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
async def handle_general_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    username = user.username if user.username else user.first_name
    text = update.message.text.strip()

    if not text:
        await update.message.reply_text(
            "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.",
            reply_markup=main_menu_keyboard()
        )
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {text}")

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
    correlations = predict_correlations(
        statement=text,
        embedding_model=context.bot_data['embedding_model'],
        model=context.bot_data['model'],
        scaler=context.bot_data['scaler'],
        talanov_data_file=TALANOV_STATEMENTS_FILE,
        user_data_file=FEEDBACK_DATA_FILE,
        user_statements_file=USER_STATEMENTS_FILE
    )

    if not correlations:
        await update.message.reply_text(
            "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_keyboard()
        )
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–ª—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id}).")
        return

    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
    traits = calculate_traits(correlations)

    # –ù–µ–π—Ä–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
    probabilities = predict_socionics_types(traits, SOCIONICS_TYPES)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –∏ –Ω–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –±—ã
    agree_disagree = get_agree_disagree_types(probabilities)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    reply_text = "üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è*:\n\n"
    for type_name, prob in probabilities.items():
        reply_text += f"{type_name}: {prob:.2f}%\n"

    reply_text += f"\nüëç *–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã*: {', '.join(agree_disagree['agree'])}\n"
    reply_text += f"üëé *–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã*: {', '.join(agree_disagree['disagree'])}\n"

    await update.message.reply_text(reply_text, parse_mode='Markdown', reply_markup=main_menu_keyboard())

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –ø–æ–ª—É—á–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info
async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    info_text = (
        "‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–æ—Ç–µ*:\n\n"
        "–Ø —Å–æ—Ü–∏–æ–Ω–∏—á–µ—Å–∫–∏–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç:\n"
        "üîπ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å —Å–æ—Ü–∏–æ–Ω–∏—á–µ—Å–∫–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.\n"
        "üîπ –ü–æ–∑–≤–æ–ª—è—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.\n"
        "üîπ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ–ø—Ä–æ—Å–Ω–∏–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ —Å–æ—Ü–∏–æ—Ç–∏–ø–∞.\n"
        "üîπ –í—ã–ø–æ–ª–Ω—è—Ç—å –Ω–µ–π—Ä–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è.\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã*:\n"
        "üîπ /start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.\n"
        "üîπ /add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n"
        "üîπ /oprosnik - –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å–Ω–∏–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Ü–∏–æ—Ç–∏–ø–∞.\n"
        "üîπ /neurotype - –ü—Ä–æ–≤–µ—Å—Ç–∏ –Ω–µ–π—Ä–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é.\n"
        "üîπ /update_model - –û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.\n"
        "üîπ /info - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö.\n"
        "üîπ /cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å."
    )
    await update.message.reply_text(info_text, parse_mode='Markdown', reply_markup=main_menu_keyboard())
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel
async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    username = user.username if user.username else user.first_name

    context.user_data.clear()
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.", reply_markup=main_menu_keyboard())
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –æ—Ç–º–µ–Ω–∏–ª —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (/add)
async def add_statement_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    username = user.username if user.username else user.first_name

    await update.message.reply_text(
        "‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.",
        reply_markup=ReplyKeyboardMarkup([['/cancel']], resize_keyboard=True, one_time_keyboard=True)
    )
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    return BotStates.WAITING_FOR_STATEMENT


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (/add)
async def add_statement_receive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    username = user.username if user.username else user.first_name
    statement = update.message.text.strip()

    if not statement:
        await update.message.reply_text("‚ùóÔ∏è –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—É—Å—Ç–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")
        return BotStates.WAITING_FOR_STATEMENT

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ user_data
    context.user_data['new_statement'] = statement
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏:\n"
        "1. **–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç**:\n"
        "`+–ë–°, +–ë–ò, -–ß–°, -–ß–õ`\n"
        "2. **–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç**:\n"
        "`–ß–ò: -0.07`\n"
        "`–ë–ò: 0.9`\n"
        "–ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç -1 –¥–æ 1.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏:",
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardMarkup([['/cancel']], resize_keyboard=True, one_time_keyboard=True)
    )
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –≤–≤—ë–ª —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {statement}")
    return BotStates.WAITING_FOR_CORRELATIONS_INPUT


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π (/add)
async def add_correlations_receive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    username = user.username if user.username else user.first_name
    text = update.message.text.strip()

    # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
    corrected_correlations = parse_corrected_correlations(text)
    if corrected_correlations:
        statement = context.user_data.get('new_statement')
        if not statement:
            await update.message.reply_text("‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
            logging.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π.")
            return ConversationHandler.END

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∫–∞–∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏)
        save_feedback(
            user_id=user_id,
            username=username,
            statement=statement,
            corrected_correlations=corrected_correlations,
            positive_feedback=False
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        # await send_correlations_to_developer(context.bot, user_id, username, statement, corrected_correlations)

        await update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –±—É–¥—É—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.",
            reply_markup=main_menu_keyboard()
        )

        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è–º–∏.")
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n\n"
            "1. **–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç**:\n"
            "`+–ë–°, +–ë–ò, -–ß–°, -–ß–õ`\n"
            "2. **–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç**:\n"
            "`–ß–ò: -0.07`\n"
            "`–ë–ò: 0.9`\n"
            "–ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç -1 –¥–æ 1.",
            parse_mode='Markdown',
            reply_markup=ReplyKeyboardMarkup([['/cancel']], resize_keyboard=True, one_time_keyboard=True)
        )
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {text}")
        return BotStates.WAITING_FOR_CORRELATIONS_INPUT


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /oprosnik (–æ–ø—Ä–æ—Å–Ω–∏–∫)
async def oprosnik_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    username = user.username if user.username else user.first_name

    # –ó–∞–≥—Ä—É–∑–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
    talanov_data_file = TALANOV_STATEMENTS_FILE
    user_statements_file = USER_STATEMENTS_FILE

    talanov_statements = []
    if os.path.exists(talanov_data_file):
        with open(talanov_data_file, 'r', encoding='utf-8') as f:
            talanov_data = json.load(f)
            talanov_statements.extend([entry['statement'] for entry in talanov_data])

    user_statements = []
    if os.path.exists(user_statements_file):
        with open(user_statements_file, 'r', encoding='utf-8') as f:
            user_data = json.load(f)
            user_statements.extend([entry['statement'] for entry in user_data])

    all_statements = talanov_statements + user_statements
    total_statements = len(all_statements)

    if total_statements == 0:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–ø—Ä–æ—Å–Ω–∏–∫–∞.")
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å–Ω–∏–∫ –±–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return ConversationHandler.END

    num_questions = 10  # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º —á–µ—Ä–µ–∑ config/settings.py
    if num_questions > total_statements:
        num_questions = total_statements

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    random_statements = random.sample(all_statements, num_questions)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['oprosnik'] = {
        'statements': random_statements,
        'answers': [],
        'current_question': 0
    }

    await update.message.reply_text(
        "üìã *–ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å–Ω–∏–∫.*\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π—Ç–µ —Ü–∏—Ñ—Ä–æ–π –æ—Ç 1 –¥–æ 5, –≥–¥–µ:\n"
        "1Ô∏è‚É£ - –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω\n"
        "2Ô∏è‚É£ - –°–∫–æ—Ä–µ–µ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω\n"
        "3Ô∏è‚É£ - –ù–µ –∑–Ω–∞—é\n"
        "4Ô∏è‚É£ - –°–∫–æ—Ä–µ–µ —Å–æ–≥–ª–∞—Å–µ–Ω\n"
        "5Ô∏è‚É£ - –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω",
        parse_mode='Markdown',
        reply_markup=main_menu_keyboard()
    )

    await send_next_oprosnik_question(update, context)
    return BotStates.OPROSNIK_PROCESSING


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ –æ–ø—Ä–æ—Å–Ω–∏–∫–µ
async def send_next_oprosnik_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    oprosnik_data = context.user_data.get('oprosnik')
    if not oprosnik_data:
        await update.message.reply_text("‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ–ø—Ä–æ—Å–Ω–∏–∫ –∑–∞–Ω–æ–≤–æ.")
        logging.error("–î–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ user_data.")
        return ConversationHandler.END

    current_question = oprosnik_data['current_question']
    statements = oprosnik_data['statements']

    if current_question < len(statements):
        question = statements[current_question]
        await update.message.reply_text(
            f"‚ùì *–í–æ–ø—Ä–æ—Å {current_question + 1} –∏–∑ {len(statements)}*:\n\n{question}",
            parse_mode='Markdown'
        )
        oprosnik_data['current_question'] += 1
        return BotStates.OPROSNIK_PROCESSING
    else:
        # –û–ø—Ä–æ—Å–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω
        await process_oprosnik_results(update, context)
        return ConversationHandler.END


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
async def handle_oprosnik_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    oprosnik_data = context.user_data.get('oprosnik')
    if not oprosnik_data:
        await update.message.reply_text("‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ–ø—Ä–æ—Å–Ω–∏–∫ –∑–∞–Ω–æ–≤–æ.")
        logging.error("–î–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ user_data.")
        return ConversationHandler.END

    answer = update.message.text.strip()
    if answer not in ['1', '2', '3', '4', '5']:
        await update.message.reply_text("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π—Ç–µ —Ü–∏—Ñ—Ä–æ–π –æ—Ç 1 –¥–æ 5.")
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.username} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç: {answer}")
        return BotStates.OPROSNIK_PROCESSING

    oprosnik_data['answers'].append(int(answer))
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.username} –æ—Ç–≤–µ—Ç–∏–ª: {answer}")
    return await send_next_oprosnik_question(update, context)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
async def process_oprosnik_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    oprosnik_data = context.user_data.get('oprosnik')
    if not oprosnik_data:
        await update.message.reply_text("‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞.")
        logging.error("–î–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        return

    statements = oprosnik_data['statements']
    answers = oprosnik_data['answers']

    if len(statements) != len(answers):
        await update.message.reply_text("‚ùóÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤.")
        logging.error("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
    accumulated_correlations = {func: 0.0 for func in FUNCTIONS}

    for statement, answer in zip(statements, answers):
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–ª—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        correlations = predict_correlations(
            statement=statement,
            embedding_model=context.bot_data['embedding_model'],
            model=context.bot_data['model'],
            scaler=context.bot_data['scaler'],
            talanov_data_file=TALANOV_STATEMENTS_FILE,
            user_data_file=FEEDBACK_DATA_FILE,
            user_statements_file=USER_STATEMENTS_FILE
        )

        if not correlations:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–ª—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {statement}")
            continue

        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        modified_correlations = modify_coefficients_based_on_answer(correlations, answer)

        if modified_correlations is None:
            # –û—Ç–≤–µ—Ç 3, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è
            continue

        # –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
        for func in FUNCTIONS:
            accumulated_correlations[func] += modified_correlations.get(func, 0.0)

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
    num_questions = len(statements)
    for func in accumulated_correlations:
        accumulated_correlations[func] /= num_questions

    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
    traits = calculate_traits(accumulated_correlations)

    # –ù–µ–π—Ä–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
    probabilities = predict_socionics_types(traits, SOCIONICS_TYPES)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –∏ –Ω–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –±—ã
    agree_disagree = get_agree_disagree_types(probabilities)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    reply_text = "üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–Ω–∏–∫–∞*:\n\n"
    for type_name, prob in probabilities.items():
        reply_text += f"{type_name}: {prob:.2f}%\n"

    reply_text += f"\nüëç *–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã*: {', '.join(agree_disagree['agree'])}\n"
    reply_text += f"üëé *–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã*: {', '.join(agree_disagree['disagree'])}\n"

    await update.message.reply_text(reply_text, parse_mode='Markdown', reply_markup=main_menu_keyboard())

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    # for statement, answer in zip(statements, answers):
    #     correlations = predict_correlations(...)
    #     save_feedback(user_id, username, statement, correlations, positive_feedback=True)

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.username} –∑–∞–≤–µ—Ä—à–∏–ª –æ–ø—Ä–æ—Å–Ω–∏–∫ –∏ –ø–æ–ª—É—á–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /neurotype
async def neurotype_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    username = user.username if user.username else user.first_name

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
    user_input = update.message.text[len('/neurotype'):].strip()
    if user_input:
        description = user_input
        await process_neurotype_description(update, context, description)
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "üß† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–µ–π—Ä–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "/neurotype –Ø –ª—é–±–ª—é –ø–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–º –∏ —Å—Ç—Ä–µ–º–ª—é—Å—å –∫ –≥–∞—Ä–º–æ–Ω–∏–∏.",
            reply_markup=ReplyKeyboardMarkup([['/cancel']], resize_keyboard=True, one_time_keyboard=True)
        )
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ–π—Ä–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return BotStates.WAITING_FOR_NEUROTYPE_DESCRIPTION


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –Ω–µ–π—Ä–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏—è
async def neurotype_receive_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    description = update.message.text.strip()
    user = update.effective_user
    user_id = user.id
    username = user.username if user.username else user.first_name

    if not description:
        await update.message.reply_text(
            "‚ùóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–µ–π—Ä–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏—è.",
            reply_markup=ReplyKeyboardMarkup([['/cancel']], resize_keyboard=True, one_time_keyboard=True)
        )
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–µ–π—Ä–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return BotStates.WAITING_FOR_NEUROTYPE_DESCRIPTION

    await process_neurotype_description(update, context, description)
    return ConversationHandler.END


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–µ–π—Ä–æ—Ç–∏–ø–∞
async def process_neurotype_description(update: Update, context: ContextTypes.DEFAULT_TYPE, description: str):
    user = update.effective_user
    user_id = user.id
    username = user.username if user.username else user.first_name

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
    correlations = predict_correlations(
        statement=description,
        embedding_model=context.bot_data['embedding_model'],
        model=context.bot_data['model'],
        scaler=context.bot_data['scaler'],
        talanov_data_file=TALANOV_STATEMENTS_FILE,
        user_data_file=FEEDBACK_DATA_FILE,
        user_statements_file=USER_STATEMENTS_FILE
    )

    if not correlations:
        await update.message.reply_text(
            "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_keyboard()
        )
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id}).")
        return

    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
    traits = calculate_traits(correlations)

    # –ù–µ–π—Ä–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
    probabilities = predict_socionics_types(traits, SOCIONICS_TYPES)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –∏ –Ω–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –±—ã
    agree_disagree = get_agree_disagree_types(probabilities)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    reply_text = "üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ–π—Ä–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏—è*:\n\n"
    for type_name, prob in probabilities.items():
        reply_text += f"{type_name}: {prob:.2f}%\n"

    reply_text += f"\nüëç *–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã*: {', '.join(agree_disagree['agree'])}\n"
    reply_text += f"üëé *–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã*: {', '.join(agree_disagree['disagree'])}\n"

    await update.message.reply_text(reply_text, parse_mode='Markdown', reply_markup=main_menu_keyboard())

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    # save_feedback(user_id, username, description, correlations, positive_feedback=True)

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –∑–∞–≤–µ—Ä—à–∏–ª –Ω–µ–π—Ä–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'add_statement':
        await add_statement_start(update, context)
    elif query.data == 'oprosnik':
        await oprosnik_start(update, context)
    elif query.data == 'neurotype':
        await neurotype_start(update, context)
    elif query.data == 'info':
        await info_command(update, context)
    else:
        await query.edit_message_text(text="‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É: {query.data}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logging.error(f"Update {update} –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É {context.error}")
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –≤–æ–∑–Ω–∏–∫—à–µ–π –æ—à–∏–±–∫–µ
    try:
        if isinstance(update, Update) and update.effective_chat:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
async def send_correlations_to_developer(bot, user_id, username, statement, correlations):
#–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    message = (
       f"üîÑ *–ù–æ–≤—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*:\n\n"
       f"üë§ –ù–∏–∫: @{username}\n"
        f"üÜî Telegram ID: {user_id}\n\n"
        f"üìù *–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ*:\n{statement}\n\n"
         f"üìä *–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏*:\n"
    )
    for func, corr in correlations.items():
         message += f"{func}: {corr:.4f}\n"

    try:
        await bot.send_message(chat_id=DEVELOPER_CHAT_ID, text=message, parse_mode='Markdown')
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: {e}")
